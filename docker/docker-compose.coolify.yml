services:
  app:
    image: usertour/usertour:latest
    ports:
      - "8011:80"
    environment:
      # Prisma
      - PRISMA_BINARY_PLATFORM=linux-musl-openssl-3.0.x

      # Postgres
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/usertour?schema=usertour&sslmode=prefer
      - DATABASE_DIRECT_URL=postgresql://postgres:postgres@postgres:5432/usertour?schema=usertour&sslmode=prefer

      # Nest
      - NEST_SERVER_PORT=3000

      # Email
      - EMAIL_HOST=
      - EMAIL_PORT=
      - EMAIL_USER=
      - EMAIL_PASS=

      # Redis
      - Redis_HOST=redis
      - Redis_PORT=6379
      - Redis_PASS=

      # App serve
      - APP_HOMEPAGE_URL=

      # AWS S3
      - AWS_S3_REGION=
      - AWS_S3_ENDPOINT=
      - AWS_S3_ACCESS_KEY_ID=
      - AWS_S3_SECRET_ACCESS_KEY=
      - AWS_S3_BUCKET=
      - AWS_S3_DOMAIN=

      # JWT
      - JWT_SECRET=test
      - JWT_EXPIRATION_TIME=1h
      - JWT_REFRESH_EXPIRATION_TIME=7d

      # Email Authentication
      - EMAIL_AUTH_ENABLED=true
      - EMAIL_SENDER=Usertour <support@usertour.io>

      # GitHub Authentication
      - GITHUB_AUTH_ENABLED=false
      - GITHUB_CLIENT_ID=
      - GITHUB_CLIENT_SECRET=
      - GITHUB_CALLBACK_URL=http://localhost:8011/api/auth/github/callback

      # Google Authentication
      - GOOGLE_AUTH_ENABLED=false
      - GOOGLE_CLIENT_ID=
      - GOOGLE_CLIENT_SECRET=
      - GOOGLE_CALLBACK_URL=http://localhost:8011/api/auth/google/callback

      # Login redirect url
      - LOGIN_REDIRECT_URL=/env/1/flows

      # Cookie
      - USERTOUR_COOKIE_DOMAIN=
      - USERTOUR_COOKIE_SECURE=

      # Stripe Configuration
      - STRIPE_API_KEY=
      - STRIPE_ACCOUNT_WEBHOOK_SECRET=
      - STRIPE_ACCOUNT_TEST_WEBHOOK_SECRET=
      - STRIPE_SESSION_SUCCESS_URL=
      - STRIPE_SESSION_CANCEL_URL=
      - STRIPE_PORTAL_RETURN_URL=

      # Node
      - NODE_ENV=production

      # Web api url
      - API_URL=
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=usertour
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always

volumes:
  postgres_data:
  redis_data:
